#!/usr/bin/env python

import os
import sys
import argparse
import ulauncher
import subprocess
import uver

class _CustomLauncherRunner(ulauncher.LauncherRunner):

    ulauncherConfigRoot = os.path.join(
        os.environ['ULAUNCHER_CONFIG_ROOT'],
        "launcher"
    )
    uverConfigRoot = os.environ['UVER_CONFIG_ROOT']
    uchooserEnvName = 'ULAUNCHER_SHOW_UCHOOSER'

    def run(self, executableType, args, env, displayUChooser=False):
        """
        Hooking the execution to add support for the "addonchooser" interface.
        """
        software = self.software()

        # showing addon chooser
        if displayUChooser:
            disabledAddons = []
            enabledAddons = []
            for addonName in software.addonNames():
                addon = software.addon(addonName)
                if 'enabled' in addon.optionNames() and addon.option("enabled"):
                    enabledAddons.append(addonName)
                else:
                    disabledAddons.append(addonName)

            process = subprocess.Popen(
                'uchooser "{0}" "{1}"'.format(
                    ' '.join(disabledAddons),
                    ' '.join(enabledAddons),
                ),
                stdout=subprocess.PIPE,
                shell=True
            )
            stdout, stderr = process.communicate()
            enabledAddonNames = stdout[:-1].split(' ')
            for addonName in software.addonNames():
                addon = software.addon(addonName)
                addon.setOption('enabled', (addon.name() in enabledAddonNames))

        # runnint it
        return super(_CustomLauncherRunner, self).run(
            executableType,
            args,
            env
        )

    @staticmethod
    def createSoftware(name, env):
        """
        Return a versioned software object.
        """
        # creating a uver parser to collect the available softwares
        uverLoader = uver.Loader.JsonLoader()
        uverLoader.addFromJsonDirectory(_CustomLauncherRunner.uverConfigRoot)

        # getting available softwares
        softwares = uverLoader.softwares(env)

        # returning specific software
        return uver.Query(softwares).softwareByName(name)


# command help
parser = argparse.ArgumentParser(
    add_help=False,
    description='Launches an application'
)

parser.add_argument(
    'name',
    type=str,
    help='Application name that should be initialized'
)

parser.add_argument(
    '--uchooser',
    default=False,
    action="store_true",
    help='Displays the addon chooser interface before loading the application.'
)

if __name__ == "__main__":
    args, unknownArgs = parser.parse_known_args()
    env = dict(os.environ)

    displayUChooser = args.uchooser
    uchooserEnv = _CustomLauncherRunner.uchooserEnvName
    if uchooserEnv in env:
        displayUChooser = True
        del env[uchooserEnv]

    # executable type
    executableType = "default"
    nameArgs = args.name.split("/")
    if len(nameArgs) > 1:
        executableType = '/'.join(nameArgs[1:])

    # creating a software to pass to the runner
    software = _CustomLauncherRunner.createSoftware(
        nameArgs[0],
        env
    )

    # creating a launcher runner
    launcherRunner = _CustomLauncherRunner(
        software,
        _CustomLauncherRunner.ulauncherConfigRoot
    )

    # running it
    sys.exit(
        launcherRunner.run(
            executableType,
            unknownArgs,
            env,
            displayUChooser
        ).exitStatus()
    )
